#!/usr/bin/env python

import os, yaml, glob, copy

try:
	import json
except ImportError:
	import simplejson as json

LIST_MERGE = ("libvirt_domains", "libvirt_domains_deleted")
DICT_MERGE = ("users", "users_deleted", "libvirt_domain_users", )

def update_merged(container, key, value):
	if key in LIST_MERGE:
		container.setdefault(key, []).extend(value)
	elif key in DICT_MERGE:
		container.setdefault(key, {}).update(value)
	else:
		assert False

class DynamicInventory(object):
	def __init__(self):
		self.all = {}
		self.hypervisors = {}

	def update(self, doc):
		if "_all" in doc:
			for k,v in doc["_all"].items():
				update_merged(self.all, k, v)

		for hypervisor, config in doc.items():
			if hypervisor == "_all": continue
			h = self.hypervisors.setdefault(hypervisor, {})
			for k,v in config.items():
				update_merged(h, k, v)
			for host in h.get("libvirt_domains",[]):
				host["hypervisor"] = hypervisor

	def inventory(self):
		hypervisors = {}

		for hypervisor, config_orig in self.hypervisors.items():
			values = {}
			for k,v in self.all.items():
				update_merged(values, k, v)
			for k,v in config_orig.items():
				update_merged(values, k, v)
			hypervisors[hypervisor] = values

		groups = { "hypervisors":
			hypervisors.keys()
		}
		domains = {}

		for hypervisor, config in hypervisors.items():
			for domain in config.get("libvirt_domains", []):
				if domain["name"] in config.get("libvirt_domains_deleted", []): continue
				vars = {
					"hypervisor_machine": domain["hypervisor"],
					"ansible_host": domain["ip"],
					"internal_ip": domain["ip"],
				}
				vars.update(domain.get("vars", {}))
				domains[domain["name"]] = vars

				groups.setdefault("virtual_machines", []).append(domain["name"])
				for group in domain.get("groups", []):
					groups.setdefault(group, []).append(domain["name"])

		host_vars = dict()
		host_vars.update(hypervisors)
		host_vars.update(domains)

		response = {
			"_meta": {
				"hostvars": host_vars,
			}
		}
		response.update(groups)

		return response

if __name__ == "__main__":
	i = DynamicInventory()

	for filename in glob.glob("config/*.yml"):
		for doc in yaml.load_all(file(filename, "r")):
			i.update(doc)

	print json.dumps(i.inventory(), indent=4)
